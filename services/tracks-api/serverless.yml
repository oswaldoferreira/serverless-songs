service: serverless-songs

plugins:
  - serverless-iam-roles-per-function

frameworkVersion: '2'

custom:
  # Interesting way to point to a lambda function in another serverless.yml (i.e. service).
  authFunctionArn: arn:aws:lambda:sa-east-1:793140127098:function:serverless-auth-dev-Auth:1

provider:
  name: aws
  runtime: go1.x
  stage: dev
  region: sa-east-1

  environment:
    TRACKS_TABLE: Tracks-${self:provider.stage}
    TRACKS_ID_INDEX: TracksIdIndex-${self:provider.stage}
    TRACKS_S3_BUCKET: serverless-tracks-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:

  CreateTrack:
    handler: bin/lambda/http/createTrack
    events:
      - http:
          path: tracks
          method: post
          authorizer: ${self:custom.authFunctionArn}
          cors: true
          request:
            schema:
              application/json: ${file(models/create-track-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKS_TABLE}
      - Effect: Allow
        Action:
          # This allows lambda functions to get the signed URLs 
          # to either upload or fetch images from the bucket.
          - s3:PutObject
          # This would just be required if we wanted to sign a URL from 
          # within a lambda function, which is not needed (public reading).
          # - s3:GetObject
        Resource: arn:aws:s3:::${self:provider.environment.TRACKS_S3_BUCKET}/*

  GetTracks:
    handler: bin/lambda/http/getTracks
    events:
      - http:
          path: tracks
          method: get
          authorizer: ${self:custom.authFunctionArn}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKS_TABLE}/index/${self:provider.environment.TRACKS_ID_INDEX}

  DeleteTrack:
    handler: bin/lambda/http/deleteTrack
    events:
      - http:
          path: tracks/{trackId}
          method: delete
          authorizer: ${self:custom.authFunctionArn}
          cors: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TRACKS_TABLE}

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi
    
    TracksDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId 
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
          - AttributeName: trackId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: trackId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TRACKS_TABLE}
        # Here we make use of the secondary index to query a properly sorted collection.
        # But for deletion, we remove it from the root table (which has the todoId as key),
        # which then propagates to this index.
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TRACKS_ID_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TRACKS_S3_BUCKET}
        AccessControl: "Private"
        # No need to notify things after the object is created.
        # NotificationConfiguration:
        #   TopicConfigurations:
        #     - Event: s3:ObjectCreated:Put
        #       Topic: !Ref ImagesTopic
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000
  
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TRACKS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket